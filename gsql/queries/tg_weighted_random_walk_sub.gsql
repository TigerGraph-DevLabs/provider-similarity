CREATE QUERY tg_weighted_random_walk_sub(VERTEX source, INT length, INT num_walks, FLOAT p, FLOAT q, FILE f) { 
    /* This query impletemented random walk in Node2vec paper. Link: https://cs.stanford.edu/~jure/pubs/node2vec-kdd16.pdf
    Input: source vertex, random walk length, walk times for each vertex, output file, set of valid edge types
    Output: random walk sequence
    */

	SetAccum<VERTEX> @@pick;
    ListAccum<FLOAT> @@prob;
    ListAccum<VERTEX> @@candidates;
    ListAccum<VERTEX>@@path;
    FLOAT Prob;
    SumAccum<INT> @d_tx=2;
    SumAccum<FLOAT>@score;

            
    FOREACH i in RANGE[0,num_walks-1] DO
        // add source vertex into path
        @@path += source;
        Start = {source};

        WHILE(Start.size()>=0 ) LIMIT length DO 
            // Calculate transition probability
            Start = SELECT s
                    FROM Start:s-(:e)-:t
                    POST-ACCUM 
                        IF t.@d_tx ==0 THEN
                            t.@score = (1/p) //* e.score
                        ELSE IF t.@d_tx == 1 THEN
                            t.@score = 1 //t.score
                        ELSE
                            t.@score = (1/q) //* e.score
                        END;
                // Reset candidates @d_tx =2, start vertex @d_dx = 0
                // store score and vertex of candidates
            candidates = SELECT t
                FROM Start:s-(:e)-:t
                ACCUM t.@d_tx = 2, s.@d_tx = 0
                POST-ACCUM @@prob +=t.@score, @@candidates +=t;
                    
            IF candidates.size() == 0 THEN
                @@path += source;
                continue;
            END;
            // generate prob value based on weight distribution
            Prob = random_distribution(@@prob);
            //print Prob;
            // pick vertex that generated by random function
            @@path += @@candidates.get(Prob);
            @@pick += @@candidates.get(Prob);

            //print @@pick;
            // select the vertex that connected with @@pick in candidates and set @d_tx=1
            sel = SELECT s
                FROM candidates:s-(:e)-:t
                WHERE t == @@candidates.get(Prob)
                POST-ACCUM s.@d_tx =1;

            // select @@pick as the next start vertex
            Start = @@pick;
                    
            // clear accumulators to start next iteration
            @@pick.clear();
            @@prob.clear();
            @@candidates.clear();
        END;  // WHILE
        print @@path;
        f.println(@@path);
        @@path.clear();
    END; // FOREACH
}

INSTALL QUERY tg_weighted_random_walk_sub