#
# Copyright 2020-2021 Xilinx, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
SET QUERY_TIMEOUT = 600000
USE GRAPH @graph
DROP QUERY all



#CREATE QUERY cosinesim_cache_to_vertices() FOR GRAPH @graph {
#    cosinesim_embed_vectors();
#    cosinesim_embed_normals();
#}


CREATE QUERY cosinesim_match_sw(vertex<patients> source, uint topKID) 
FOR GRAPH @graph RETURNS (ListAccum<XilCosinesimMatch>) {

# Heap with max size of topKID sorted decending by score then ascending last name
    HeapAccum<XilCosinesimMatch>(topKID, score DESC, Id ASC) @@topK_Heap;
    ListAccum<XilCosinesimMatch> @@topK;
    ListAccum<vertex<patients>> @@plist;
    ListAccum<INT> @@targetPatientVector;
    DOUBLE targetPatientNormal;

# Patient Population
    population = {patients.*};
    @@targetPatientVector = patient_vector(source);
    targetPatientNormal = udf_calculate_normal(@@targetPatientVector);

    patientList = SELECT p FROM population:p
        ACCUM @@topK_Heap += XilCosinesimMatch(p,
            udf_cos_theta(p.COSINE_SIM_VECTOR, p.COSINE_SIM_NORMAL, @@targetPatientVector, targetPatientNormal));

    FOREACH item IN @@topK_Heap DO
        @@topK += item; 
    END;

    RETURN @@topK;
}

CREATE DISTRIBUTED QUERY cosinesim_set_num_devices(UINT num_devices) FOR GRAPH @graph {
    udf_xilinx_recom_set_num_devices(num_devices);
}

CREATE DISTRIBUTED QUERY cosinesim_get_num_devices() FOR GRAPH @graph RETURNS (UINT) {
    UINT ret;
    ret = udf_xilinx_recom_get_num_devices();
    return ret;
}

CREATE DISTRIBUTED QUERY cosinesim_is_fpga_initialized() FOR GRAPH @graph RETURNS (BOOL) {
    BOOL ret;
    ret = udf_xilinx_recom_is_initialized();
    RETURN ret;
}

create query load_graph_cosinesim_ss_fpga_core() for graph @graph returns (int) {
    ListAccum<ListAccum<int> > @@patientVectors;
    ListAccum<UINT> @@patientIds;
    int ret;

    population = {patients.*};
    patientList = select p from population:p
        ACCUM @@patientVectors += p.COSINE_SIM_VECTOR, @@patientIds += getvid(p);

    ret = udf_xilinx_recom_load_population_vectors(@@patientVectors, @@patientIds);
    return ret;
}

create query cosinesim_ss_fpga_core (vertex source, uint topK) for 
    graph @graph returns (ListAccum<XilCosinesimMatch>) 
{
    ListAccum<XilCosinesimMatch> @@results;
    ListAccum<DOUBLE> @@target;

    s = {source};
    res = SELECT p FROM s:p POST-ACCUM @@target += p.embedding

    @@results = udf_xilinx_recom_match_target_vector(topK, @@target);
    RETURN @@results;
}



INSTALL QUERY patient_age, patient_race, patient_gender, patient_ethnicity, 
    patient_vector, cosinesim_clear_embeddings, cosinesim_embed_vectors, cosinesim_embed_normals,
    cosinesim_match_sw, cosinesim_set_num_devices, 
    cosinesim_get_num_devices, cosinesim_is_fpga_initialized,
    load_graph_cosinesim_ss_fpga_core, cosinesim_ss_fpga_core, insert_dummy_nodes


